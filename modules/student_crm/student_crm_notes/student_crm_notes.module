<?php

/**
 * Implements hook_entity_info().
 */
function entity_test_entity_info() {
  $return =  array(
    'student_crm_note' => array(
      'label' => t('Note'),
      'controller class' => 'StudentCRMNoteController',
      'base table' => 'student_crm_notes',
      'revision table' => 'student_crm_note_revision',
      'uri callback' => 'student_crm_notes_note_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'note_id',
        'revision' => 'vid',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'view modes' => array(
        'full' => array(
          'label' => t('Contact Notes'),
          'custom settings' => FALSE,
        ),
      ),
    ),
    );
    foreach (student_crm_note_type_get_name() as $type => $name) {
      $return['student_crm_note']['bundles'][$type] = array(
        'label' => $name,
        'admin' => array(
          'path' => 'crm/admin/note/types/%student_crm_note_type',
          'real path' => 'crm/admin/note/types/' . str_replace('_', '-', $type),
          'bundle argument' => 4,
          'access arguments' => array('administer note types'),
        ),
      );
    }
    return $return;
}

/**
 * Entity uri callback.
 */
function student_crm_notes_note_uri($note) {
  return array(
    'path' => 'crm/contact/' . $note->contact_id .'/note/'. $note->note_id,
  );
}

/**
 * Implements hook_permission().
 */
function student_crm_notes_permission() {
  return array(
    'administer note types' => array(
      'title' => t('Administer Note Types'),
      'description' => t('Allow the user to edit types of notes.'),
    ),
    'add notes' => array(
      'title' => t('Add notes'),
      'description' => t('Allows the user to add notes.'),
    ),
    'edit notes' => array(
      'title' => t('Edit Notes'),
      'description' => t('Allows the user to edit notes that have already been added to the CRM.'),
    ),
    'administer notes' => array(
      'title' => t('Administer notes'),
      'description' => t('Allows the user to edit/delete any notes.'),
    ),
  );
}

/**
 * Returns the name of note types
 *
 * @param $type
 *  [optional] - Specify the type whose name to return.
 * @return
 *  If $type is specified, a string containing the human
 *  readable name of the type.
 *  If $type isn't specified an array containing all human
 *  readable names keyed on the machine type.
 */
function student_crm_note_type_get_name($type = NULL) {
  $note_types = student_crm_note_types();
 
  // If type is set return the name if it exists
  if (!empty($type)) {
    if (isset($note_types[$type])) {
      return $note_types[$type]->name;
    }
    else {
      return FALSE;
    }
  }
  
  // Otherwise return a mapping of type => name
  foreach ($note_types as $key => $value) {
    $note_types[$key] = $value->name;
  }

  return $note_types;
}

/**
 * Returns an array of note types.
 */
function student_crm_note_types() {
  $note_types = &drupal_static(__FUNCTION__);

  if (!isset($note_types)) {
    $note_types = db_select('student_crm_note_type', 't')
    			  ->fields('t')
    			  ->execute()
    			  ->fetchAllAssoc('type');
  }

  return $note_types;
}